apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'sonar-runner'

archivesBaseName = 'theta'
version = rootProject.version

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
    }
}

dependencies {
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    integrationTestCompile sourceSets.main.output
    integrationTestCompile configurations.testCompile
    integrationTestCompile sourceSets.test.output
    integrationTestRuntime configurations.testRuntime
}

javadoc {
    mustRunAfter clean
}

jar {
    mustRunAfter clean
}

sonarRunner {
    sonarProperties {
        property "sonar.projectName", archivesBaseName
        property "sonar.host.url", "http://shiro.be:9000"
        property "sonar.jdbc.url", "jdbc:mysql://shiro.be:3306/sonar"
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.username", java.lang.System.getenv()['SONAR_DB_USER']
        property "sonar.jdbc.password", java.lang.System.getenv()['SONAR_DB_PASSWORD']
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task javadocArchive(type: Zip, dependsOn: [clean, javadoc]) {
    mustRunAfter clean

    baseName "javadoc-$archivesBaseName"
    from javadoc.destinationDir
}

task distribute(type: Copy, dependsOn: [clean, jar, javadocArchive]) {
    mustRunAfter clean

    from libsDir
    into distsDir
}
