package com.theta360.ptp.data;

import com.theta360.ptp.data.GUID;
import org.junit.Test;

import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsNot.not;
import static org.junit.Assert.*;

public class GUIDTest {
    @Test(expected = NullPointerException.class)
    public void withNullArray() {
        // act
        new GUID((byte[]) null);
    }

    @Test
    public void constructAndGet() {
        // expected
        byte[] expected = new byte[]{
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
        };

        // act
        GUID guid = new GUID(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F);

        // verify
        assertThat(guid.bytes(), is(expected));
    }

    @Test
    public void testHashCode() {
        // given
        GUID guid1 = new GUID(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F);
        GUID guid2 = new GUID(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F);
        GUID guid3 = new GUID(0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00);

        // verify
        assertThat(guid1.hashCode(), is(guid2.hashCode()));
        assertThat(guid1.hashCode(), is(not(guid3.hashCode())));
    }

    @Test
    public void testEquals() {
        // given
        GUID guid1 = new GUID(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F);
        GUID guid2 = new GUID(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F);

        // verify
        assertTrue(guid1.equals(guid2));
        assertTrue(guid2.equals(guid1));
    }

    @Test
    public void testNotEquals() {
        // given
        GUID guid1 = new GUID(0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F);
        GUID guid2 = new GUID(0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00);

        // verify
        assertFalse(guid1.equals(guid2));
        assertFalse(guid2.equals(guid1));
    }
}
